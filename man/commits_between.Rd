% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/commits_between.R
\name{commits_between}
\alias{commits_between}
\title{List commits between two git commits}
\usage{
commits_between(from, to = NULL, filter_file = NULL, repo = ".")
}
\arguments{
\item{from}{A commit object or revision string. A string of the form
'from...to' may also be passed, in which case the commits between the two
revision strings are used and the \code{to} argument is ignored. If a list of commits
is passed, these commits are used rather than calculating the commits between.}

\item{to}{A commit object or reference}

\item{filter_file}{The path to a file relative to the git directory. If not NULL,
only commits modifying this file will be returned. Note that modifying
commits that occurred before the file was given its present name are not
returned.}

\item{repo}{The path to the git repository}
}
\value{
A list of commits
}
\description{
Given two commit objects, find the commits between them.
}
\details{
"Between" is bit of a slippery concept in git, since there may be multiple
paths between two commits. Internally it uses \code{\link[git2r:commits]{git2r::commits()}} which, in
turn using the \href{https://libgit2.org/libgit2/#HEAD/group/revwalk}{revwalk API}, which is similar to
\href{https://git-scm.com/docs/git-rev-list}{git rev-list}. Essentially, it walks
back from the \code{to/from} commit (whichever is the descendant) until it reaches
the other. If there are multiple paths between the two commits, it will
return the commits on all paths.
}
